import base64

import streamlit
from streamlit_option_menu import option_menu
from components.page_team_contact import contact_action, team_action
from components.page_mof_information import mof_inf_action
from components.predict import predict


streamlit.set_page_config(
    layout="wide",
    page_title="adsorption AI platform",
    initial_sidebar_state="collapsed"
)

with open("static/style.css") as css_file:
    streamlit.markdown('<style>{}</style>'.format(css_file.read()), unsafe_allow_html=True)


@streamlit.cache_data
def get_img_as_base64(file):
    with open(file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()


img = get_img_as_base64("images/background.jpg")

page_back = f"""
<style>

[data-testid="stAppViewContainer"]{{
background-image: url("data:image/png;base64,{img}");
# background-image: url("../images/background.jpg");
background-size: cover;
}}
</style>
"""

streamlit.markdown(page_back, unsafe_allow_html=True)


def predict_action():
    streamlit.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ MOFs")

    page_style = f"""
    <style>
    .css-7mza0f {{
        border:3px solid white;
        padding:10px;
        background-color: white;
    }}
    </style>
    """

    streamlit.markdown(page_style, unsafe_allow_html=True)
    Temp_reg_C = streamlit.number_input("T—Ä–µ–≥, ·µí–° - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",value=200)
    W0_cm3_g = streamlit.number_input("W0, —Å–º3/–≥ - —É–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –º–∏–∫—Ä–æ–ø–æ—Ä",value=0.65)
    E0_KDG_moll = streamlit.number_input("E0, –∫–î–∂/ –º–æ–ª—å - —ç–Ω–µ—Ä–≥–∏—è –∞–¥—Å–æ—Ä–±—Ü–∏–∏ –±–µ–Ω–∑–æ–ª–∞",value=24.15)
    x0_nm = streamlit.number_input("—Ö0, –Ω–º - —Ä–∞–¥–∏—É—Å –º–∏–∫—Ä–æ–ø–æ—Ä",value=0.50)
    a0_mmoll_gr = streamlit.number_input("–∞0, –º–º–æ–ª—å/–≥ - –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –∞–¥—Å–æ—Ä–±—Ü–∏–∏",value=18.59)
    E_kDg_moll = streamlit.number_input("E,  –∫–î–∂/–º–æ–ª—å - —ç–Ω–µ—Ä–≥–∏—è –∞–¥—Å–æ—Ä–±—Ü–∏–∏ –∞–∑–æ—Ç–∞",value=7.97)
    SBAT_m2_gr = streamlit.number_input("S–ë–≠–¢, –º2/–≥ - —É–¥–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏",value=1473.00)
    Ws_cm3_gr = streamlit.number_input("Ws, —Å–º3/–≥ - —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º –ø–æ—Ä",value=0.68)
    Sme_m2_gr = streamlit.number_input("Sme, –º2/–≥ - –ø–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–µ–∑–æ–ø–æ—Ä",value=22.00)
    Wme_cm3_gr = streamlit.number_input("Wme, —Å–º3/–≥ - –æ–±—ä–µ–º –º–µ–∑–æ–ø–æ—Ä",value=0.03)

    data = {
        "Regeneration temperature of the sample, ¬∞C": Temp_reg_C,
        "Specific volume of micropores, cm3/g": W0_cm3_g,
        "Standard characteristic energy of benzene adsorption, kJ/mol": E0_KDG_moll,
        "Mean effective half-width of micropores, nm": x0_nm,
        "Ultimate adsorption value of nitrogen in micropores, mmol/g": a0_mmoll_gr,
        "Characteristic energy of nitrogen adsorption, kJ/mol": E_kDg_moll,
        "Specific surface area, m2/g": SBAT_m2_gr,
        "Total pore volume, cm3/g": Ws_cm3_gr,
        "Mesopore surface area, m2/g": Sme_m2_gr,
        "Mesopore volume, cm3/g": Wme_cm3_gr
    }

    if streamlit.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏–∫—É —Å–∏–Ω—Ç–µ–∑–∞"):
        table_params, prediction_table = predict(data)
        streamlit.title("–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ MOFs:")
        prediction_table.columns = ["–ú–µ—Ç–∞–ª–ª",
                                    "–õ–∏–≥–∞–Ω–¥",
                                    "n(—Å–æ–ª—å)/n(–∫–∏—Å–ª–æ—Ç–∞)",
                                    "V—Å–∏–Ω(—Ä-–ª—è)/m(—Å–æ–ª–∏)",
                                    "–¢.—Å–∏–Ω."]
        streamlit.table(table_params)
        streamlit.title("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∏–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ MOFs:")
        streamlit.table(prediction_table)


def run():
    with streamlit.sidebar:
        selected = option_menu(
            menu_title="ùêÄùêà —Å–µ—Ä–≤–∏—Å –ø–æ—Ä–∏—Å—Ç—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            options=["–û –Ω–∞—Å", "MOFs –æ–ø–∏—Å–∞–Ω–∏–µ", "ùêÄùêà —Å–∏–Ω—Ç–µ–∑ MOFs", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            icons=["house", "book", "box fill", "list task", "person lines fill",
                   # "clipboard data fill",
                   "bar-chart-line-fill"],
            menu_icon="kanban fill",
            default_index=0,
            # orientation="horizontal",
            styles={
                "container": {"padding": "0 % 0 % 0 % 0 %"},
                "icon": {"color": "red", "font-size": "25px"},
                "nav-link": {"font-size": "20px", "text-align": "start", "margin": "0px"},
                "nav-link-selected": {"background-color": "#483D8B"},
            }

        )

    if selected == "–û –Ω–∞—Å":
        team_image = "images/team.jpg"
        team_action(team_image)
    if selected == "ùêÄùêà —Å–∏–Ω—Ç–µ–∑ MOFs":
        predict_action()
    if selected == "MOFs –æ–ø–∏—Å–∞–Ω–∏–µ":
        image1 = "images/1page.jpg"
        image2 = "images/2page.jpg"
        mof_inf_action(image1, image2)
    if selected == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        contact_action()


if __name__ == '__main__':
    run()
